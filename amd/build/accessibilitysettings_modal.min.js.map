{
    "version": 3,
    "file": "accessibilitysettings_modal.min.js",
    "sources": ["../src/accessibilitysettings_modal.js"],
    "sourcesContent": ["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free sof" +
            "tware: you can redistribute it and/or modify\n// it under the terms of the GNU" +
            " General Public License as published by\n// the Free Software Foundation, eith" +
            "er version 3 of the License, or\n// (at your option) any later version.\n//\n/" +
            "/ Moodle is distributed in the hope that it will be useful,\n// but WITHOUT AN" +
            "Y WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNES" +
            "S FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more d" +
            "etails.\n//\n// You should have received a copy of the GNU General Public Lice" +
            "nse\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**" +
            "\n * Theme settings modal js.\n *\n * @package\n * @copyright  2025 Septian Dw" +
            "wi - https://tiancode.my.id\n * @license    http://www.gnu.org/copyleft/gpl.html G" +
            "NU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport Modal from 'cor" +
            "e/modal';\nimport * as CustomEvents from 'core/custom_interaction_events';\nim" +
            "port Notification from 'core/notification';\n\nexport default class Accessibil" +
            "ityModal extends Modal {\n    static TYPE = \"theme_president/themesettings_mo" +
            "dal\";\n    static TEMPLATE = \"theme_president/accessibilitysettings_modal\";" +
            "\n\n    constructor(root) {\n        super(root);\n\n        let request = Aja" +
            "x.call([{\n            methodname: 'theme_president_getthemesettings',\n      " +
            "      args: {}\n        }]);\n\n        request[0].done(function(result) {\n  " +
            "          document.getElementById('fonttype').value = result.fonttype;\n\n    " +
            "        if (result.enableaccessibilitytoolbar) {\n                document.get" +
            "ElementById('enableaccessibilitytoolbar').checked = true;\n            }\n    " +
            "    });\n    }\n\n    /**\n     * Set up all of the event handling for the mod" +
            "al.\n     */\n    registerEventListeners() {\n        // Apply parent event li" +
            "steners.\n        super.registerEventListeners(this);\n\n        this.getModal" +
            "().on(CustomEvents.events.activate, '[data-action=\"save\"]', function() {\n  " +
            "          let request = Ajax.call([{\n                methodname: 'theme_presi" +
            "dent_savethemesettings',\n                args: {\n                    formdat" +
            "a: this.getBody().find('form').serialize()\n                }\n            }])" +
            ";\n\n            request[0].done(function() {\n                document.locati" +
            "on.reload(true);\n            }).fail(function(error) {\n                let m" +
            "essage = error.message;\n\n                if (!message) {\n                  " +
            "  message = error.error;\n                }\n\n                Notification.ad" +
            "dNotification({\n                    message: message,\n                    ty" +
            "pe: 'error'\n                });\n\n                this.hide();\n\n          " +
            "      this.destroy();\n            }.bind(this));\n        }.bind(this));\n\n " +
            "       this.getModal().on(CustomEvents.events.activate, '[data-action=\"cancel" +
            "\"]', function() {\n            this.hide();\n            this.destroy();\n   " +
            "     }.bind(this));\n    }\n}"],
    "names": [
        "AccessibilityModal",
        "Modal",
        "constructor",
        "root",
        "Ajax",
        "call",
        "methodname",
        "args",
        "done",
        "result",
        "document",
        "getElementById",
        "value",
        "fonttype",
        "enableaccessibilitytoolbar",
        "checked",
        "registerEventListeners",
        "this",
        "getModal",
        "on",
        "CustomEvents",
        "events",
        "activate",
        "formdata",
        "getBody",
        "find",
        "serialize",
        "location",
        "reload",
        "fail",
        "error",
        "message",
        "addNotification",
        "type",
        "hide",
        "destroy",
        "bind"
    ],
    "mappings": "4kDA2BqBA,2BAA2BC,eAI5CC,YAAYC,YACFA,MAEQC,cAAKC,KAAK,CAAC,CACrBC,WAAY,+BACZC," +
            "KAAM,MAGF,GAAGC,MAAK,SAASC,QACrBC,SAASC,eAAe,YAAYC,MAAQH,OAAOI,SAE/CJ,OAAOK,6B" +
            "ACPJ,SAASC,eAAe,8BAA8BI,SAAU,MAQ5EC,+BAEUA,uBAAuBC,WAExBC,WAAWC,GAAGC,aAAaC,OA" +
            "AOC,SAAU,uBAAwB,WACvDlB,cAAKC,KAAK,CAAC,CACrBC,WAAY,gCACZC,KAAM,CACFgB,SAAUN,K" +
            "AAKO,UAAUC,KAAK,QAAQC,gBAItC,GAAGlB,MAAK,WACZE,SAASiB,SAASC,QAAO,MAC1BC,KAAK,S" +
            "AASC,WACTC,QAAUD,MAAMC,QAEfA,UACDA,QAAUD,MAAMA,6BAGPE,gBAAgB,CACzBD,QAASA,QACT" +
            "E,KAAM,eAGLC,YAEAC,WACPC,KAAKnB,QACTmB,KAAKnB,YAEFC,WAAWC,GAAGC,aAAaC,OAAOC,SA" +
            "AU,yBAA0B,gBAClEY,YACAC,WACPC,KAAKnB,mEA3DMjB,0BACH,mDADGA,8BAEC"
}